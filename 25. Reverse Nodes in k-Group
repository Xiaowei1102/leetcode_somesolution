# Definition for singly-linked list.
class Node:
    def __init__(self, x, next = None):
        self.value = x
        self.next = next
class Solution:
    def reverseKGroup(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        # use stack to store k nodes value
        p = Node(0)
        newHead = Node(0, p)
        stack = []
        stack1 = []
        n = 0
        while(head.next != None ):
            n = 0
            while(n < k and head != None):
                stack.append(head.value)
                head = head.next
                n = n + 1
            if n < k: 
                # this means the rest of the nodes is smaller than k, 
                #we use another stack to pop the elements
                while(stack != []):
                    stack1.append(stack.pop())
                while(stack1 != []):
                    p.next = Node(stack1.pop())
                    p = p.next
                break
            else:
                while(stack != []):
                    p.next = Node(stack.pop())
                    p = p.next
        p.next = head
        return newHead.next.next
l1 = Node(1, Node(3, Node(5, Node(7, Node(9, Node(11, Node(13)))))))
p = Solution()
l2 = p.reverseKGroup(l1, 4)
